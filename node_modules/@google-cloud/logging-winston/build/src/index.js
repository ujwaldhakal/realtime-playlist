"use strict";
/*!
 * Copyright 2016 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var is = require("@sindresorhus/is");
var util = require("util");
var winston = require("winston");
var logging = require('@google-cloud/logging');
var mapValues = require('lodash.mapvalues');
// Map of npm output levels to Stackdriver Logging levels.
var NPM_LEVEL_NAME_TO_CODE = {
    error: 3,
    warn: 4,
    info: 6,
    verbose: 7,
    debug: 7,
    silly: 7,
};
// Map of Stackdriver Logging levels.
var STACKDRIVER_LOGGING_LEVEL_CODE_TO_NAME = {
    0: 'emergency',
    1: 'alert',
    2: 'critical',
    3: 'error',
    4: 'warning',
    5: 'notice',
    6: 'info',
    7: 'debug'
};
/*!
 * Log entry data key to allow users to indicate a trace for the request.
 */
exports.LOGGING_TRACE_KEY = 'logging.googleapis.com/trace';
/*!
 * Gets the current fully qualified trace ID when available from the
 * @google-cloud/trace-agent library in the LogEntry.trace field format of:
 * "projects/[PROJECT-ID]/traces/[TRACE-ID]".
 */
function getCurrentTraceFromAgent() {
    var agent = global._google_trace_agent;
    if (!agent || !agent.getCurrentContextId || !agent.getWriterProjectId) {
        return null;
    }
    var traceId = agent.getCurrentContextId();
    if (!traceId) {
        return null;
    }
    var traceProjectId = agent.getWriterProjectId();
    if (!traceProjectId) {
        return null;
    }
    return "projects/" + traceProjectId + "/traces/" + traceId;
}
var LoggingWinston = /** @class */ (function (_super) {
    __extends(LoggingWinston, _super);
    function LoggingWinston(options) {
        var _this = this;
        options = Object.assign({
            scopes: ['https://www.googleapis.com/auth/logging.write'],
        }, options);
        var logName = options.logName || 'winston_log';
        _this = _super.call(this, {
            level: options.level,
            name: logName,
        }) || this;
        _this.inspectMetadata = options.inspectMetadata === true;
        _this.levels = options.levels || NPM_LEVEL_NAME_TO_CODE;
        _this.stackdriverLog = new logging(options).log(logName);
        _this.resource = options.resource;
        _this.serviceContext = options.serviceContext;
        return _this;
    }
    LoggingWinston.prototype.log = function (levelName, msg, metadata, callback) {
        if (is.default.function_(metadata)) {
            callback = metadata;
            metadata = {};
        }
        if (this.levels[levelName] === undefined) {
            throw new Error('Unknown log level: ' + levelName);
        }
        var levelCode = this.levels[levelName];
        var stackdriverLevel = STACKDRIVER_LOGGING_LEVEL_CODE_TO_NAME[levelCode];
        var entryMetadata = {
            resource: this.resource,
        };
        var data = {};
        // Stackdriver Logs Viewer picks up the summary line from the `message`
        // property of the jsonPayload.
        // https://cloud.google.com/logging/docs/view/logs_viewer_v2#expanding.
        //
        // For error messages at severity 'error' and higher, Stackdriver
        // Error Reporting will pick up error messages if the full stack trace is
        // included in the textPayload or the message property of the jsonPayload.
        // https://cloud.google.com/error-reporting/docs/formatting-error-messages
        // We prefer to format messages as jsonPayload (by putting it as a message
        // property on an object) as that works is accepted by Error Reporting in
        // for more resource types.
        //
        if (metadata && metadata.stack) {
            msg += (msg ? ' ' : '') + metadata.stack;
            data.serviceContext = this.serviceContext;
        }
        data.message = msg;
        if (is.default.object(metadata)) {
            data.metadata =
                this.inspectMetadata ? mapValues(metadata, util.inspect) : metadata;
            // If the metadata contains a httpRequest property, promote it to the
            // entry metadata. This allows Stackdriver to use request log formatting.
            // https://cloud.google.com/logging/docs/reference/v2/rest/v2/LogEntry#HttpRequest
            // Note that the httpRequest field must properly validate as HttpRequest
            // proto message, or the log entry would be rejected by the API. We no do
            // validation here.
            if (metadata.httpRequest) {
                entryMetadata.httpRequest = metadata.httpRequest;
                delete data.metadata.httpRequest;
            }
            // If the metadata contains a labels property, promote it to the entry
            // metadata.
            // https://cloud.google.com/logging/docs/reference/v2/rest/v2/LogEntry
            if (metadata.labels) {
                entryMetadata.labels = metadata.labels;
                delete data.metadata.labels;
            }
        }
        // metadata does not have index signature.
        // tslint:disable-next-line:no-any
        if (metadata && metadata[exports.LOGGING_TRACE_KEY]) {
            // metadata does not have index signature.
            // tslint:disable-next-line:no-any
            entryMetadata.trace = metadata[exports.LOGGING_TRACE_KEY];
            // metadata does not have index signature.
            // tslint:disable-next-line:no-any
            delete data.metadata[exports.LOGGING_TRACE_KEY];
        }
        else {
            var trace = getCurrentTraceFromAgent();
            if (trace) {
                entryMetadata.trace = trace;
            }
        }
        var entry = this.stackdriverLog.entry(entryMetadata, data);
        // stackdriverLog does not have index signature. We need to call the
        // corresponding log level function.
        // tslint:disable-next-line:no-any
        this.stackdriverLog[stackdriverLevel](entry, callback);
    };
    LoggingWinston.LOGGING_TRACE_KEY = exports.LOGGING_TRACE_KEY;
    return LoggingWinston;
}(winston.Transport));
exports.LoggingWinston = LoggingWinston;
// We need to add StackdriverLogging to winston.transport which does not
// contain this type.
// tslint:disable-next-line:no-any
winston.transports.StackdriverLogging = LoggingWinston;
//# sourceMappingURL=index.js.map